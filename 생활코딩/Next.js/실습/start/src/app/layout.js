// "use client";
// import { useState, useEffect } from "react";
import Control from "./Control";
import "./globals.css";
import Link from "next/link";

// export const metadata = {
//   title: "Web Tutorials",
//   description: "Generated by Jinga",
// };

const ulStyle = "flex font-semibold";
const liStyle = "mx-2";

export default async function RootLayout({ children }) {
  // export default async function RootLayout({ children }) {
  // const res = await fetch("http://localhost:9999/topics");

  // const topics = await res.json();
  // console.log(topics);

  // 기본적으로 server component로 인식하기때문에 react처럼 이렇게 쓰면 에러가 뜸
  // 최상단에 "use client"; 넣으면 client component로 인식함
  // const [topics, setTopics] = useState([]);

  // useEffect(() => {
  // 서버에서 데이터를 떙겨오는 중
  // 그리고 JavaScript를 끄면 동작하지 않음
  // 보안문제도 있을 수 있다.
  // fetch("http://localhost:9999/topics")
  //   .then((result) => result.json())
  //   .then((data) => {
  //     setTopics(data);
  //   });

  // 서버쪽에서 fetch 실행 -> json으로 변경 후 이 데이터로 글 목록을 동적으로 생성한 다음
  // 이렇게 만들어진 결과를 서버쪽 .next폴더에 저장 후 최종적인 정적인 화면만 제공해준다.
  const resp = await fetch("http://localhost:9999/topics", {
    cache: "no-store",
  });
  const topics = await resp.json();
  // }, []);
  return (
    <html>
      <body>
        <h1>
          <a href="/">WEB</a>
        </h1>
        <ol className={ulStyle}>
          {topics.map((topic) => {
            return (
              <li key={topic.id} className={liStyle}>
                <Link href={`/read/${topic.id}`}>{topic.title}</Link>
              </li>
            );
          })}
        </ol>
        {children}
        <Control />
      </body>
    </html>
  );
}
